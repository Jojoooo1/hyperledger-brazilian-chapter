{"version":3,"sources":["../../app/controllers/organizacao.js"],"names":["validationOptions","recursive","abortEarly","stripUnknown","createOrganizacao","stub","args","data","formattedData","JSON","parse","toString","err","Error","console","info","id","cnpj","dataAsBytes","getState","Schema","validate","createdAt","Date","getTxTimestamp","getSeconds","toISOString","updatedAt","Buffer","from","stringify","putState","setEvent","log","updateOrganizacao","dataToUpdate","updatedData","deleteOrganizacao","deleteState"],"mappings":"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","sourcesContent":["// import { performance } from 'perf_hooks';\nimport * as Schema from '../models/organizacao';\n\nconst validationOptions = { recursive: true, abortEarly: true, stripUnknown: true };\n\nexport const createOrganizacao = async (stub, args) => {\n  let data;\n  let formattedData;\n\n  // 1. Parse JSON stringified request\n  try {\n    data = JSON.parse(args.toString('utf8'));\n  } catch (err) {\n    throw new Error('Não foi possivel decodificar o JSON, por favor verifique o formato');\n  }\n\n  console.info('--- start createOrganizacao ---');\n\n  // 2. Get identifier\n  const id = data.cnpj;\n\n  if (!id) {\n    throw new Error('Por favor especifique o cnpj');\n  }\n\n  // 3. Verifies data does not exist\n  let dataAsBytes = await stub.getState(id);\n  if (dataAsBytes.toString('utf8')) {\n    throw new Error(`Organizacao com cnpj ${id} ja existe`);\n  }\n\n  // const t0 = performance.now();\n  // 4. Verifies Object format\n  try {\n    formattedData = await Schema.createOrganizacao.validate(data, validationOptions);\n  } catch (err) {\n    throw err;\n  }\n  // const t1 = performance.now();\n  // console.log(`Call took ${t1 - t0} ms.`);\n\n  // 5. Sets Date information (not 100% reliable)\n  formattedData.createdAt = new Date(stub.getTxTimestamp().getSeconds() * 1000).toISOString();\n  formattedData.updatedAt = formattedData.createdAt;\n\n  // 6. Transforms JSON into Bytes data\n  dataAsBytes = Buffer.from(JSON.stringify(formattedData));\n  // 7. Pushes updated data into the ledger\n  await stub.putState(id, dataAsBytes);\n  // 8. Creates event\n  stub.setEvent('organizacaoCreated', dataAsBytes);\n\n  console.info('==================');\n  console.log(formattedData);\n  console.info('==================');\n  console.info('--- end createOrganizacao ---');\n};\n\nexport const updateOrganizacao = async (stub, args) => {\n  let data;\n  let formattedData;\n\n  // 1. Parses JSON stringified request\n  try {\n    data = JSON.parse(args.toString('utf8'));\n  } catch (err) {\n    throw new Error('Não foi possivel decodificar o JSON, por favor verifique o formato');\n  }\n\n  console.info('--- start updateOrganizacao ---');\n\n  // 2. Get identifier\n  const id = data.cnpj;\n  if (!id) {\n    throw new Error('Por favor especifique o cnpj');\n  }\n\n  // 3. Verifies if data already exist\n  let dataAsBytes = await stub.getState(id);\n  if (!dataAsBytes.toString('utf8')) {\n    throw new Error(`Organizacao com cnpj ${id} nao encontrado`);\n  }\n\n  // 4. Verifies Object format\n  try {\n    formattedData = await Schema.updateOrganizacao.validate(data, validationOptions);\n  } catch (err) {\n    throw err;\n  }\n\n  // 5. Parses data that will be updated\n  const dataToUpdate = JSON.parse(dataAsBytes.toString('utf8'));\n  // 6. Merges updated organizacao into organizacao to update -> Possibles to use specific merging function/lib to only update modified fields\n  const updatedData = { ...dataToUpdate, ...formattedData };\n  // 6.1 Updates updateAt\n  updatedData.updatedAt = new Date(stub.getTxTimestamp().getSeconds() * 1000).toISOString();\n  // 7. Transforms the JSON data into Bytes data\n  dataAsBytes = Buffer.from(JSON.stringify(updatedData));\n\n  // 8. Pushes updated data into the ledger\n  await stub.putState(id, dataAsBytes);\n\n  // 9. Sends event\n  stub.setEvent('organizacaoUpdated', dataAsBytes);\n  console.info('==================');\n  console.log(updatedData);\n  console.info('==================');\n  console.info('--- end updateOrganizacao ---');\n};\n\nexport const deleteOrganizacao = async (stub, args) => {\n  const cnpj = args[0];\n\n  // 1. Verifies identifier is not empty\n  if (!cnpj) {\n    throw new Error('Por favor especifique o cnpj');\n  }\n\n  console.log('--- start deleteOrganizacao ---');\n\n  // 2. Verifies if data already exists\n  const dataAsBytes = await stub.getState(cnpj);\n  if (!dataAsBytes.toString('utf8')) {\n    throw new Error(`Organizacao com cnpj \"${cnpj}\" nao encontrado`);\n  }\n\n  // 3. Deletes data\n  await stub.deleteState(cnpj);\n\n  // 4. Sends event\n  stub.setEvent('organizacaoRemoved', dataAsBytes);\n  console.info('==================');\n  console.log(`organizacao com cnpj \"${cnpj}\" foi deletado`);\n  console.info('==================');\n  console.info('--- end deleteOrganizacao ---');\n};\n"],"file":"organizacao.js"}